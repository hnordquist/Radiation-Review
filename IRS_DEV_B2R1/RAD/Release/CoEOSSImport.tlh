// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (2a6998be).
//
// c:\code\rad\irs_dev_b2r1\rad\release\CoEOSSImport.tlh
//
// C++ source equivalent of Win32 type library CoEOSSImport.dll
// compiler-generated file created 11/05/14 at 18:27:13 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct /* coclass */ EOSSImport;
struct __declspec(uuid("f0b152c3-d724-4578-9306-325de0e006f3"))
/* dual interface */ IEOSSImport;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IEOSSImport, __uuidof(IEOSSImport));

//
// Type library items
//

struct __declspec(uuid("b29f34d6-f347-4ca8-8014-0e23be9744ae"))
EOSSImport;
    // [ default ] interface IEOSSImport

struct __declspec(uuid("f0b152c3-d724-4578-9306-325de0e006f3"))
IEOSSImport : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL AddData (
        short sFacilityID,
        _bstr_t bstrFilename,
        VARIANT_BOOL bOverwrite,
        BSTR * bstrResult );
    VARIANT_BOOL BackupDataStore (
        short sFacilityID,
        _bstr_t bstrDestinationPath,
        VARIANT_BOOL bQuestion,
        VARIANT_BOOL bDefault );
    HRESULT CloseDataStore ( );
    VARIANT_BOOL CreateNewDataStore (
        short sFacilityID );
    VARIANT_BOOL DeleteData (
        short sFacilityID,
        long lStationID,
        DATE dtStartDate,
        DATE dtEndDate );
    VARIANT_BOOL DeleteDataStore (
        short sFacilityID );
    VARIANT_BOOL GetDataByChannel (
        short sFacilityID,
        long lStationID,
        short sChannelID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData );
    VARIANT_BOOL GetDataByStation (
        short sFacilityID,
        long lStationID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData );
    VARIANT_BOOL GetDataStatistics (
        short sFacilityID,
        long lStationID,
        short sChannelID,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers );
    _bstr_t GetDataStorePath (
        short sFacilityID );
    VARIANT_BOOL GetDataStoreSize (
        short sFacilityID,
        double * pdSizeInBytes );
    long GetDataStoreStatus (
        short sFacilityID );
    VARIANT_BOOL GetDataStoreTimeRange (
        short sFacilityID,
        long lStationID,
        VARIANT_BOOL bErrDisplay,
        DATE * FirstTimestamp,
        DATE * LastTimestamp );
    VARIANT_BOOL GetDayStatistics (
        short sFacilityID,
        long lStationID,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers );
    VARIANT_BOOL GetDaySummaryData (
        short sFacilityID,
        long lStationID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvDay );
    HRESULT GetFilesList (
        short sFacilityID,
        _bstr_t bstrRootDir,
        VARIANT_BOOL bIncludeSubDirs,
        VARIANT_BOOL bMostRecent,
        VARIANT * psaFilesList );
    long GetLastError (
        short sFacilityID,
        BSTR * pbstrErrortext );
    VARIANT_BOOL GetParameters (
        short sFacilityID,
        VARIANT * pvParms );
    VARIANT_BOOL InitializeDataStore (
        short sFacilityID,
        VARIANT_BOOL bQuestion );
    VARIANT_BOOL OpenDataStore (
        short sFacilityID );
    VARIANT_BOOL RestoreDataStore (
        short sFacilityID,
        _bstr_t bstrSourcePath,
        VARIANT_BOOL bQuestion,
        VARIANT_BOOL bDefault );
    VARIANT_BOOL SetParameters (
        short sFacilityID,
        const _variant_t & vParms );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_AddData (
        short sFacilityID,
        BSTR bstrFilename,
        VARIANT_BOOL bOverwrite,
        BSTR * bstrResult,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_BackupDataStore (
        short sFacilityID,
        BSTR bstrDestinationPath,
        VARIANT_BOOL bQuestion,
        VARIANT_BOOL bDefault,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_CloseDataStore ( ) = 0;
    virtual HRESULT __stdcall raw_CreateNewDataStore (
        short sFacilityID,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_DeleteData (
        short sFacilityID,
        long lStationID,
        DATE dtStartDate,
        DATE dtEndDate,
        VARIANT_BOOL * pbStatus ) = 0;
    virtual HRESULT __stdcall raw_DeleteDataStore (
        short sFacilityID,
        VARIANT_BOOL * pbStatus ) = 0;
    virtual HRESULT __stdcall raw_GetDataByChannel (
        short sFacilityID,
        long lStationID,
        short sChannelID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataByStation (
        short sFacilityID,
        long lStationID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataStatistics (
        short sFacilityID,
        long lStationID,
        short sChannelID,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataStorePath (
        short sFacilityID,
        BSTR * bstrStorePath ) = 0;
    virtual HRESULT __stdcall raw_GetDataStoreSize (
        short sFacilityID,
        double * pdSizeInBytes,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataStoreStatus (
        short sFacilityID,
        long * plStatus ) = 0;
    virtual HRESULT __stdcall raw_GetDataStoreTimeRange (
        short sFacilityID,
        long lStationID,
        VARIANT_BOOL bErrDisplay,
        DATE * FirstTimestamp,
        DATE * LastTimestamp,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDayStatistics (
        short sFacilityID,
        long lStationID,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDaySummaryData (
        short sFacilityID,
        long lStationID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvDay,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetFilesList (
        short sFacilityID,
        BSTR bstrRootDir,
        VARIANT_BOOL bIncludeSubDirs,
        VARIANT_BOOL bMostRecent,
        VARIANT * psaFilesList ) = 0;
    virtual HRESULT __stdcall raw_GetLastError (
        short sFacilityID,
        BSTR * pbstrErrortext,
        long * plError ) = 0;
    virtual HRESULT __stdcall raw_GetParameters (
        short sFacilityID,
        VARIANT * pvParms,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_InitializeDataStore (
        short sFacilityID,
        VARIANT_BOOL bQuestion,
        VARIANT_BOOL * pbSuccess ) = 0;
    virtual HRESULT __stdcall raw_OpenDataStore (
        short sFacilityID,
        VARIANT_BOOL * pbSuccess ) = 0;
    virtual HRESULT __stdcall raw_RestoreDataStore (
        short sFacilityID,
        BSTR bstrSourcePath,
        VARIANT_BOOL bQuestion,
        VARIANT_BOOL bDefault,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_SetParameters (
        short sFacilityID,
        VARIANT vParms,
        VARIANT_BOOL * pbResult ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_COEOSSIMPORTLib =
    {0xb9765e90,0xf808,0x4ffb,{0xa9,0x8a,0x05,0x4f,0xfa,0x41,0x82,0xe1}};
extern "C" const GUID __declspec(selectany) CLSID_EOSSImport =
    {0xb29f34d6,0xf347,0x4ca8,{0x80,0x14,0x0e,0x23,0xbe,0x97,0x44,0xae}};
extern "C" const GUID __declspec(selectany) IID_IEOSSImport =
    {0xf0b152c3,0xd724,0x4578,{0x93,0x06,0x32,0x5d,0xe0,0xe0,0x06,0xf3}};

//
// Wrapper method implementations
//

#include "c:\code\rad\irs_dev_b2r1\rad\release\CoEOSSImport.tli"

#pragma pack(pop)
