// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (e80468cc).
//
// c:\code\rad\irs_dev_b2r1\rad\release\CoFacilityMgr.tli
//
// Wrapper implementations for Win32 type library CoFacilityMgr.exe
// compiler-generated file created 11/17/14 at 12:52:58 - DO NOT EDIT!

#pragma once

//
// interface IFacilityMgrData wrapper method implementations
//

inline _bstr_t IFacilityMgrData::GetFacilityDirectory ( short FacilityID ) {
    BSTR _result;
    HRESULT _hr = raw_GetFacilityDirectory(FacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IFacilityMgrData::IsChannelEnabled ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, short sChannelID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsChannelEnabled(sFacilityID, lStationID, bstrInstrumentType, sChannelID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IFacilityMgrData::GetChannelID ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, _bstr_t bstrChannelLongName ) {
    short _result;
    HRESULT _hr = raw_GetChannelID(sFacilityID, lStationID, bstrInstrumentType, bstrChannelLongName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFacilityMgrData::GetChannelIDs ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, VARIANT_BOOL vbEnabledChannelsOnly, VARIANT * psaChannelIDs ) {
    HRESULT _hr = raw_GetChannelIDs(sFacilityID, lStationID, bstrInstrumentType, vbEnabledChannelsOnly, psaChannelIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFacilityMgrData::GetChannelLongName ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, short sChannelID ) {
    BSTR _result;
    HRESULT _hr = raw_GetChannelLongName(sFacilityID, lStationID, bstrInstrumentType, sChannelID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFacilityMgrData::GetChannelRecord ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, short sChannelID, VARIANT * psaChannelRec ) {
    HRESULT _hr = raw_GetChannelRecord(sFacilityID, lStationID, bstrInstrumentType, sChannelID, psaChannelRec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFacilityMgrData::GetChannelShortName ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, short sChannelID ) {
    BSTR _result;
    HRESULT _hr = raw_GetChannelShortName(sFacilityID, lStationID, bstrInstrumentType, sChannelID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short IFacilityMgrData::GetFacilityID ( _bstr_t bstrFacilityLongName ) {
    short _result;
    HRESULT _hr = raw_GetFacilityID(bstrFacilityLongName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFacilityMgrData::GetFacilityIDs ( VARIANT_BOOL vbEnabledFacilitiesOnly, VARIANT * psaFacilityIDs ) {
    HRESULT _hr = raw_GetFacilityIDs(vbEnabledFacilitiesOnly, psaFacilityIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFacilityMgrData::GetFacilityLongName ( short sFacilityID ) {
    BSTR _result;
    HRESULT _hr = raw_GetFacilityLongName(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFacilityMgrData::GetFacilityRecord ( short sFacilityID, VARIANT * psaFacilityRecord ) {
    HRESULT _hr = raw_GetFacilityRecord(sFacilityID, psaFacilityRecord);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFacilityMgrData::GetFacilityShortName ( short sFacilityID ) {
    BSTR _result;
    HRESULT _hr = raw_GetFacilityShortName(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFacilityMgrData::GetFacilityNamesList ( VARIANT_BOOL vbEnabledFacilitiesOnly, VARIANT_BOOL vbOrderByPriority, VARIANT * psaFacilityNamesList ) {
    HRESULT _hr = raw_GetFacilityNamesList(vbEnabledFacilitiesOnly, vbOrderByPriority, psaFacilityNamesList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityMgrData::GetStationNamesList ( short sFacilityID, VARIANT_BOOL vbEnabledStationsOnly, VARIANT_BOOL vbOrderByPriority, VARIANT * psaStationNamesList ) {
    HRESULT _hr = raw_GetStationNamesList(sFacilityID, vbEnabledStationsOnly, vbOrderByPriority, psaStationNamesList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IFacilityMgrData::GetNumberOfChannelsForStation ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, VARIANT_BOOL vbEnabledChannelsOnly ) {
    short _result;
    HRESULT _hr = raw_GetNumberOfChannelsForStation(sFacilityID, lStationID, bstrInstrumentType, vbEnabledChannelsOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IFacilityMgrData::GetNumberOfChannelsForFacility ( short sFacilityID, VARIANT_BOOL vbEnabledChannelsOnly ) {
    short _result;
    HRESULT _hr = raw_GetNumberOfChannelsForFacility(sFacilityID, vbEnabledChannelsOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IFacilityMgrData::GetNumberOfFacilities ( VARIANT_BOOL vbEnabledFacilitiesOnly ) {
    short _result;
    HRESULT _hr = raw_GetNumberOfFacilities(vbEnabledFacilitiesOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IFacilityMgrData::GetNumberOfStationsForFacility ( short sFacilityID, VARIANT_BOOL vbEnabledStationsOnly ) {
    short _result;
    HRESULT _hr = raw_GetNumberOfStationsForFacility(sFacilityID, vbEnabledStationsOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFacilityMgrData::IsStationEnabled ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsStationEnabled(sFacilityID, lStationID, bstrInstrumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFacilityMgrData::GetStationID ( short sFacilityID, _bstr_t bstrStationLongName, long * plStationID, BSTR * pbstrStationInstType ) {
    HRESULT _hr = raw_GetStationID(sFacilityID, bstrStationLongName, plStationID, pbstrStationInstType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityMgrData::GetStationIDs ( short sFacilityID, VARIANT_BOOL vbEnabledStationsOnly, VARIANT * psaStationIDs ) {
    HRESULT _hr = raw_GetStationIDs(sFacilityID, vbEnabledStationsOnly, psaStationIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFacilityMgrData::GetStationLongName ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType ) {
    BSTR _result;
    HRESULT _hr = raw_GetStationLongName(sFacilityID, lStationID, bstrInstrumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFacilityMgrData::GetStationRecord ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, VARIANT * psaStationRecord ) {
    HRESULT _hr = raw_GetStationRecord(sFacilityID, lStationID, bstrInstrumentType, psaStationRecord);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFacilityMgrData::GetStationShortName ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType ) {
    BSTR _result;
    HRESULT _hr = raw_GetStationShortName(sFacilityID, lStationID, bstrInstrumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IFacilityMgrData::IsChannelDefined ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType, short sChannelID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsChannelDefined(sFacilityID, lStationID, bstrInstrumentType, sChannelID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFacilityMgrData::IsFacilityDefined ( short sFacilityID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsFacilityDefined(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFacilityMgrData::IsStationDefined ( short sFacilityID, long lStationID, _bstr_t bstrInstrumentType ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsStationDefined(sFacilityID, lStationID, bstrInstrumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IFacilityMgrData::IsFacilityEnabled ( short sFacilityID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsFacilityEnabled(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFacilityMgrData::GetChannelIDsForFacility ( short sFacilityID, VARIANT_BOOL vbEnabledChannelsOnly, VARIANT * psaChannelKeys ) {
    HRESULT _hr = raw_GetChannelIDsForFacility(sFacilityID, vbEnabledChannelsOnly, psaChannelKeys);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityMgrData::GetStationIDsWithInstrumentType ( short sFacilityID, _bstr_t bstrInstrumentType, VARIANT_BOOL vbEnabledStationsOnly, VARIANT * psaStationIDs ) {
    HRESULT _hr = raw_GetStationIDsWithInstrumentType(sFacilityID, bstrInstrumentType, vbEnabledStationsOnly, psaStationIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityMgrData::GetFacilityInstrumentTypesList ( short sFacilityID, VARIANT * psaInstrumentTypesList ) {
    HRESULT _hr = raw_GetFacilityInstrumentTypesList(sFacilityID, psaInstrumentTypesList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityMgrData::SetFacilityMgrErrorLoggingParameters ( long lParameters ) {
    HRESULT _hr = raw_SetFacilityMgrErrorLoggingParameters(lParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFacilityConfigDlgs wrapper method implementations
//

inline HRESULT IFacilityConfigDlgs::ShowFacilityManagerDlg ( ) {
    HRESULT _hr = raw_ShowFacilityManagerDlg();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityConfigDlgs::ShowInstrumentManagerDlg ( ) {
    HRESULT _hr = raw_ShowInstrumentManagerDlg();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFacilityConfigDlgs::ShowUnitsManagerDlg ( ) {
    HRESULT _hr = raw_ShowUnitsManagerDlg();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IInstrumentDefData wrapper method implementations
//

inline short IInstrumentDefData::GetNumberOfInstrumentsDefined ( ) {
    short _result;
    HRESULT _hr = raw_GetNumberOfInstrumentsDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IInstrumentDefData::GetInstrumentTypeForFileType ( _bstr_t bstrFileType ) {
    BSTR _result;
    HRESULT _hr = raw_GetInstrumentTypeForFileType(bstrFileType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IInstrumentDefData::GetListOfAllInstrumentTypes ( VARIANT * psaInstrumentTypeList ) {
    HRESULT _hr = raw_GetListOfAllInstrumentTypes(psaInstrumentTypeList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IInstrumentDefData::IsInstrumentDefined ( _bstr_t bstrInstrumentType ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsInstrumentDefined(bstrInstrumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IInstrumentDefData::GetInstrumentLongName ( _bstr_t bstrInstrumentType ) {
    BSTR _result;
    HRESULT _hr = raw_GetInstrumentLongName(bstrInstrumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IInstrumentDefData::SetInstrumentDefErrorLoggingParameters ( long lParameters ) {
    HRESULT _hr = raw_SetInstrumentDefErrorLoggingParameters(lParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
