// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (fe81cfff).
//
// c:\code\rad\irs_dev_b2r1\rad\debug\CoEOSSImport.tli
//
// Wrapper implementations for Win32 type library CoEOSSImport.dll
// compiler-generated file created 11/05/14 at 13:18:35 - DO NOT EDIT!

#pragma once

//
// interface IEOSSImport wrapper method implementations
//

inline VARIANT_BOOL IEOSSImport::AddData ( short sFacilityID, _bstr_t bstrFilename, VARIANT_BOOL bOverwrite, BSTR * bstrResult ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_AddData(sFacilityID, bstrFilename, bOverwrite, bstrResult, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::BackupDataStore ( short sFacilityID, _bstr_t bstrDestinationPath, VARIANT_BOOL bQuestion, VARIANT_BOOL bDefault ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_BackupDataStore(sFacilityID, bstrDestinationPath, bQuestion, bDefault, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEOSSImport::CloseDataStore ( ) {
    HRESULT _hr = raw_CloseDataStore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IEOSSImport::CreateNewDataStore ( short sFacilityID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CreateNewDataStore(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::DeleteData ( short sFacilityID, long lStationID, DATE dtStartDate, DATE dtEndDate ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_DeleteData(sFacilityID, lStationID, dtStartDate, dtEndDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::DeleteDataStore ( short sFacilityID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_DeleteDataStore(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetDataByChannel ( short sFacilityID, long lStationID, short sChannelID, DATE StartTime, DATE EndTime, VARIANT * pvData ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDataByChannel(sFacilityID, lStationID, sChannelID, StartTime, EndTime, pvData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetDataByStation ( short sFacilityID, long lStationID, DATE StartTime, DATE EndTime, VARIANT * pvData ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDataByStation(sFacilityID, lStationID, StartTime, EndTime, pvData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetDataStatistics ( short sFacilityID, long lStationID, short sChannelID, DATE StartTime, DATE EndTime, DATE * pActualStartTime, DATE * pActualEndTime, long * plNumMembers ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDataStatistics(sFacilityID, lStationID, sChannelID, StartTime, EndTime, pActualStartTime, pActualEndTime, plNumMembers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IEOSSImport::GetDataStorePath ( short sFacilityID ) {
    BSTR _result;
    HRESULT _hr = raw_GetDataStorePath(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IEOSSImport::GetDataStoreSize ( short sFacilityID, double * pdSizeInBytes ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDataStoreSize(sFacilityID, pdSizeInBytes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IEOSSImport::GetDataStoreStatus ( short sFacilityID ) {
    long _result;
    HRESULT _hr = raw_GetDataStoreStatus(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetDataStoreTimeRange ( short sFacilityID, long lStationID, VARIANT_BOOL bErrDisplay, DATE * FirstTimestamp, DATE * LastTimestamp ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDataStoreTimeRange(sFacilityID, lStationID, bErrDisplay, FirstTimestamp, LastTimestamp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetDayStatistics ( short sFacilityID, long lStationID, DATE StartTime, DATE EndTime, DATE * pActualStartTime, DATE * pActualEndTime, long * plNumMembers ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDayStatistics(sFacilityID, lStationID, StartTime, EndTime, pActualStartTime, pActualEndTime, plNumMembers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetDaySummaryData ( short sFacilityID, long lStationID, DATE StartTime, DATE EndTime, VARIANT * pvDay ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetDaySummaryData(sFacilityID, lStationID, StartTime, EndTime, pvDay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IEOSSImport::GetFilesList ( short sFacilityID, _bstr_t bstrRootDir, VARIANT_BOOL bIncludeSubDirs, VARIANT_BOOL bMostRecent, VARIANT * psaFilesList ) {
    HRESULT _hr = raw_GetFilesList(sFacilityID, bstrRootDir, bIncludeSubDirs, bMostRecent, psaFilesList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IEOSSImport::GetLastError ( short sFacilityID, BSTR * pbstrErrortext ) {
    long _result;
    HRESULT _hr = raw_GetLastError(sFacilityID, pbstrErrortext, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::GetParameters ( short sFacilityID, VARIANT * pvParms ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetParameters(sFacilityID, pvParms, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::InitializeDataStore ( short sFacilityID, VARIANT_BOOL bQuestion ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_InitializeDataStore(sFacilityID, bQuestion, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::OpenDataStore ( short sFacilityID ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_OpenDataStore(sFacilityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::RestoreDataStore ( short sFacilityID, _bstr_t bstrSourcePath, VARIANT_BOOL bQuestion, VARIANT_BOOL bDefault ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_RestoreDataStore(sFacilityID, bstrSourcePath, bQuestion, bDefault, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IEOSSImport::SetParameters ( short sFacilityID, const _variant_t & vParms ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_SetParameters(sFacilityID, vParms, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
