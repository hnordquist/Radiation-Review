// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (220702c9).
//
// c:\code\rad\irs_dev_b2r1\rad\debug\CoLinearTimeAlign.tlh
//
// C++ source equivalent of Win32 type library CoLinearTimeAlign.dll
// compiler-generated file created 11/05/14 at 13:18:35 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct /* coclass */ TimeAlign;
struct __declspec(uuid("6143fd94-2bd5-11d6-817e-00c04f60e89b"))
/* dual interface */ ITimeAlign;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ITimeAlign, __uuidof(ITimeAlign));

//
// Type library items
//

struct __declspec(uuid("6143fd95-2bd5-11d6-817e-00c04f60e89b"))
TimeAlign;
    // [ default ] interface ITimeAlign

struct __declspec(uuid("6143fd94-2bd5-11d6-817e-00c04f60e89b"))
ITimeAlign : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SetParameters (
        short sFacilityID,
        VARIANT * ParmsVarStruct );
    VARIANT_BOOL AdjustTimestamps (
        short sFacilityID,
        long lStationID,
        short sStationType,
        long lNumItems,
        DATE * pOriginalTimestamps,
        DATE * pAdjustedTimestamps );
    VARIANT_BOOL UnadjustTimestamps (
        short sFacilityID,
        long lStationID,
        short sStationType,
        long lNumItems,
        DATE * pAdjustedTimestamps,
        DATE * pOriginalTimestamps );
    VARIANT_BOOL BackupDataStore (
        short sFacilityID,
        _bstr_t bstrDestinationPath );
    HRESULT CloseDataStore ( );
    VARIANT_BOOL InitializeDataStore (
        short sFacilityID,
        VARIANT_BOOL bQuestion );
    VARIANT_BOOL OpenDataStore (
        short sFacilityID );
    HRESULT GetDataStorePath (
        short sFacilityID,
        BSTR * bstrStorePath );
    VARIANT_BOOL GetDataStatistics (
        short sFacilityID,
        long lStationID,
        short sChanID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers );
    VARIANT_BOOL RestoreDataStore (
        short sFacilityID,
        _bstr_t bstrSourcePath );
    VARIANT_BOOL GetDataByChannel (
        short sFacilityID,
        long lStationID,
        short sStationType,
        short sChannelID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData );
    VARIANT_BOOL GetDataByStation (
        short sFacilityID,
        long lStationID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData );
    VARIANT_BOOL GetDataStoreTimeRange (
        short sFacilityID,
        long lStationID,
        short sStationType,
        VARIANT_BOOL bErrDisplay,
        DATE * FirstTimestamp,
        DATE * LastTimestamp );
    VARIANT_BOOL GetDaySummaryData (
        short sFacilityID,
        long lStationID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        VARIANT * DayVariantArray );
    VARIANT_BOOL GetDayStatistics (
        short sFacilityID,
        long lStationID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers );
    VARIANT_BOOL GetParameters (
        short sFacID,
        VARIANT * ParmsVarStruct );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SetParameters (
        short sFacilityID,
        VARIANT * ParmsVarStruct,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_AdjustTimestamps (
        short sFacilityID,
        long lStationID,
        short sStationType,
        long lNumItems,
        DATE * pOriginalTimestamps,
        DATE * pAdjustedTimestamps,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_UnadjustTimestamps (
        short sFacilityID,
        long lStationID,
        short sStationType,
        long lNumItems,
        DATE * pAdjustedTimestamps,
        DATE * pOriginalTimestamps,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_BackupDataStore (
        short sFacilityID,
        BSTR bstrDestinationPath,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_CloseDataStore ( ) = 0;
    virtual HRESULT __stdcall raw_InitializeDataStore (
        short sFacilityID,
        VARIANT_BOOL bQuestion,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_OpenDataStore (
        short sFacilityID,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataStorePath (
        short sFacilityID,
        BSTR * bstrStorePath ) = 0;
    virtual HRESULT __stdcall raw_GetDataStatistics (
        short sFacilityID,
        long lStationID,
        short sChanID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_RestoreDataStore (
        short sFacilityID,
        BSTR bstrSourcePath,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataByChannel (
        short sFacilityID,
        long lStationID,
        short sStationType,
        short sChannelID,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataByStation (
        short sFacilityID,
        long lStationID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        VARIANT * pvData,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDataStoreTimeRange (
        short sFacilityID,
        long lStationID,
        short sStationType,
        VARIANT_BOOL bErrDisplay,
        DATE * FirstTimestamp,
        DATE * LastTimestamp,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDaySummaryData (
        short sFacilityID,
        long lStationID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        VARIANT * DayVariantArray,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetDayStatistics (
        short sFacilityID,
        long lStationID,
        short sStationType,
        DATE StartTime,
        DATE EndTime,
        DATE * pActualStartTime,
        DATE * pActualEndTime,
        long * plNumMembers,
        VARIANT_BOOL * pbResult ) = 0;
    virtual HRESULT __stdcall raw_GetParameters (
        short sFacID,
        VARIANT * ParmsVarStruct,
        VARIANT_BOOL * pbResult ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_COLINEARTIMEALIGNLib =
    {0x6143fd87,0x2bd5,0x11d6,{0x81,0x7e,0x00,0xc0,0x4f,0x60,0xe8,0x9b}};
extern "C" const GUID __declspec(selectany) CLSID_TimeAlign =
    {0x6143fd95,0x2bd5,0x11d6,{0x81,0x7e,0x00,0xc0,0x4f,0x60,0xe8,0x9b}};
extern "C" const GUID __declspec(selectany) IID_ITimeAlign =
    {0x6143fd94,0x2bd5,0x11d6,{0x81,0x7e,0x00,0xc0,0x4f,0x60,0xe8,0x9b}};

//
// Wrapper method implementations
//

#include "c:\code\rad\irs_dev_b2r1\rad\debug\CoLinearTimeAlign.tli"

#pragma pack(pop)
