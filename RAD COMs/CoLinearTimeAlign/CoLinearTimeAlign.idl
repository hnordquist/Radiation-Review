// CoLinearTimeAlign.idl : IDL source for CoLinearTimeAlign.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (CoLinearTimeAlign.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(6143FD94-2BD5-11D6-817E-00C04F60E89B),
		dual,
		helpstring("ITimeAlign Interface"),
		pointer_default(unique)
	]
	interface ITimeAlign : IDispatch
	{
//		[id(1), helpstring("method SetParameters")] HRESULT SetParameters([in] short sFacilityID, [in] short sNum, [in] VARIANT* ParmsVarStruct, [out,retval] VARIANT_BOOL* pbResult);
		[id(1), helpstring("method SetParameters")] HRESULT SetParameters([in] short sFacilityID, [in] VARIANT* ParmsVarStruct, [out,retval] VARIANT_BOOL* pbResult);

		[id(2), helpstring("method AdjustTimestamps")]		HRESULT AdjustTimestamps([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] long lNumItems, [in] DATE* pOriginalTimestamps, [out] DATE*pAdjustedTimestamps, [out,retval] VARIANT_BOOL *pbResult);
		[id(3), helpstring("method UnadjustTimestamps")] HRESULT UnadjustTimestamps([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] long lNumItems, [in] DATE* pAdjustedTimestamps, [out] DATE* pOriginalTimestamps, [out, retval] VARIANT_BOOL* pbResult);

//		[id(4), helpstring("method BackupDataStore")]		HRESULT BackupDataStore([in] BSTR bstrDestinationPath, [out, retval] VARIANT_BOOL* pbResult);
		[id(4), helpstring("method BackupDataStore")]		HRESULT BackupDataStore([in] short sFacilityID, [in] BSTR bstrDestinationPath, [out, retval] VARIANT_BOOL* pbResult);

		[id(5), helpstring("method CloseDataStore")] HRESULT CloseDataStore();
		[id(6), helpstring("method InitializeDataStore")] HRESULT InitializeDataStore([in] short sFacilityID, [in] VARIANT_BOOL bQuestion, [out, retval] VARIANT_BOOL* pbResult);

//		[id(7), helpstring("method OpenDataStore")]			HRESULT OpenDataStore([out, retval] VARIANT_BOOL *pbResult);
		[id(7), helpstring("method OpenDataStore")]			HRESULT OpenDataStore([in] short sFacilityID, [out, retval] VARIANT_BOOL *pbResult);

		//[id(8), helpstring("method SetDataStore")] HRESULT SetDataStore([in] BSTR bstrRootPath);
		//[id(9), helpstring("method SetDefaultPath")] HRESULT SetDefaultPath([in] BSTR bstrDefaultPath);

		//[id(10), helpstring("method GetDataStore")]		HRESULT GetDataStore([out] BSTR* bstrStorePath);
		[id(10), helpstring("method GetDataStorePath")]		HRESULT GetDataStorePath([in] short sFacilityID, [out] BSTR* bstrStorePath);

		//[id(11), helpstring("method GetDataStatistics")] HRESULT GetDataStatistics([in] short sFacilityID, [in] long lStationID, [in] short sChanID, [in] short sStationType, [in] DATE StartTime, [in] DATE EndTime, [out] DATE* pActualStartTime, [out] DATE* pActualEndTime, [out] long* plNumMembers, [out,retval] VARIANT_BOOL* pbResult);
		[id(11), helpstring("method GetDataStatistics")] HRESULT GetDataStatistics(
			[in] short sFacilityID, 
			[in] long lStationID,
			 [in] short sChanID, 
			 [in] short sStationType, 
			 [in] DATE StartTime, 
			 [in] DATE EndTime, 
			 [out] DATE* pActualStartTime,
			  [out] DATE* pActualEndTime, 
			  [out] long* plNumMembers,
			   [out,retval] VARIANT_BOOL* pbResult);

//		[id(12), helpstring("method RestoreDataStore")]		HRESULT RestoreDataStore([in] BSTR bstrSourcePath, [out, retval] VARIANT_BOOL* pbResult);
		[id(12), helpstring("method RestoreDataStore")]		HRESULT RestoreDataStore([in] short sFacilityID, [in] BSTR bstrSourcePath, [out, retval] VARIANT_BOOL* pbResult);

//		[id(13), helpstring("method GetDataByChannel")]		HRESULT GetDataByChannel([in] short sFacilityID, [in] short sStationID, [in] short sStationType, [in] short sChannelID, [in] DATE StartTime, [in] DATE EndTime,  [out] double * pdTimestamp, [out] double* pdData, [in,out] long *plNumMembers, [out] DATE* pNextTime, [out,retval] VARIANT_BOOL* pbResult);
		[id(13), helpstring("method GetDataByChannel")]		HRESULT GetDataByChannel([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] short sChannelID, [in] DATE StartTime, [in] DATE EndTime,  [in,out] VARIANT *pvData,  [out,retval] VARIANT_BOOL* pbResult);

//		[id(14), helpstring("method GetDataByStation")]		HRESULT GetDataByStation([in] short sFacilityID, [in] short sStationID, [in] short sStationType, [in] DATE StartTime, [in] DATE EndTime, [out] double * pdTimestamp, [out] VARIANT* Struct, [in,out] long *plNumMembers, [out] DATE* pNextTime, [out,retval] VARIANT_BOOL* pbResult);
		[id(14), helpstring("method GetDataByStation")]		HRESULT GetDataByStation([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] DATE StartTime, [in] DATE EndTime, [in, out] VARIANT* pvData, [out,retval] VARIANT_BOOL* pbResult);

		[id(15), helpstring("method GetDataStoreTimeRange")] HRESULT GetDataStoreTimeRange([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] VARIANT_BOOL bErrDisplay, [out] DATE* FirstTimestamp, [out]DATE* LastTimestamp, [out,retval] VARIANT_BOOL* pbResult);

		[id(16), helpstring("method GetDaySummaryData")]	HRESULT GetDaySummaryData([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] DATE StartTime, [in] DATE EndTime,  [out] VARIANT* DayVariantArray,  [out,retval] VARIANT_BOOL* pbResult);
//		[id(16), helpstring("method GetDataByDay")]			HRESULT GetDataByDay([in] short sFacilityID, [in] short sStationID, [in] short sStationType, [in] DATE StartTime, [in] DATE EndTime,  [out] VARIANT* DayVariantArray, [in,out] long *plNumMembers,  [out,retval] VARIANT_BOOL* pbResult);

		[id(17), helpstring("method GetDayStatistics")]		HRESULT GetDayStatistics([in] short sFacilityID, [in] long lStationID, [in] short sStationType, [in] DATE StartTime, [in] DATE EndTime, [out] DATE* pActualStartTime, [out] DATE* pActualEndTime, [out] long* plNumMembers, [out,retval] VARIANT_BOOL* pbResult);

//		[id(18), helpstring("method GetParameters")] HRESULT GetParameters([in] short sFacID, [in] short sNum, [in,out] VARIANT* ParmsVarStruct, [out,retval] VARIANT_BOOL* pbResult);
		[id(18), helpstring("method GetParameters")] HRESULT GetParameters([in] short sFacID, [in,out] VARIANT* ParmsVarStruct, [out,retval] VARIANT_BOOL* pbResult);
	};

[
	uuid(6143FD87-2BD5-11D6-817E-00C04F60E89B),
	version(1.0),
	helpstring("CoLinearTimeAlign 1.0 Type Library")
]
library COLINEARTIMEALIGNLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(6143FD95-2BD5-11D6-817E-00C04F60E89B),
		helpstring("TimeAlign Class")
	]
	coclass TimeAlign
	{
		[default] interface ITimeAlign;
	};
};
