// CoBinaryImport.idl : IDL source for CoBinaryImport.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (CoBinaryImport.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(9A41FBA0-1B47-4647-98B5-1F435AA8CD1B),
		dual,
		helpstring("IBinaryImport Interface"),
		pointer_default(unique)
	]
	interface IBinaryImport : IDispatch
	{
		[id(1),  helpstring("method AddData")]					HRESULT AddData([in] short sFacilityID, [in] BSTR bstrFilename, [in] VARIANT_BOOL bOverwrite, [out] BSTR* bstrResult, [out,retval] VARIANT_BOOL* pbResult);
		[id(2),  helpstring("method BackupDataStore")]			HRESULT BackupDataStore([in] short sFacilityID, [in] BSTR bstrDestinationPath, [in] VARIANT_BOOL bQuestion, [in] VARIANT_BOOL bDefault, [out,retval] VARIANT_BOOL* pbResult);
		[id(3),  helpstring("method CloseDataStore")]			HRESULT CloseDataStore();
		[id(4),  helpstring("method CreateNewDataStore")]		HRESULT CreateNewDataStore([in] short sFacilityID, [out,retval] VARIANT_BOOL* pbResult);
		[id(5),  helpstring("method GetDataByChannel")]			HRESULT GetDataByChannel([in] short sFacilityID, [in] short sStationID, [in] short sChannelID, [in] DATE StartTime, [in] DATE EndTime,  [in,out] VARIANT *pvData, [out,retval] VARIANT_BOOL* pbResult);
		[id(6),  helpstring("method GetDataByStation")]			HRESULT GetDataByStation([in] short sFacilityID, [in] short sStationID, [in] DATE StartTime, [in] DATE EndTime, [in,out] VARIANT* pvData, [out,retval] VARIANT_BOOL* pbResult);
		[id(7),  helpstring("method GetDataStatistics")]		HRESULT GetDataStatistics([in] short sFacilityID, [in] short sStationID, [in] short sChannelID, [in] DATE StartTime, [in] DATE EndTime, [out] DATE* pActualStartTime, [out] DATE* pActualEndTime, [out] long* plNumMembers, [out,retval] VARIANT_BOOL* pbResult);
		[id(8),  helpstring("method GetDataStorePath")]			HRESULT GetDataStorePath([in] short sFacilityID, [out,retval] BSTR* bstrStorePath);
		[id(9),  helpstring("method GetDataStoreSize")]			HRESULT GetDataStoreSize([in] short sFacilityID, [out] double* pdSizeInBytes, [out, retval] VARIANT_BOOL* pbResult);
		[id(10), helpstring("method GetDataStoreTimeRange")]	HRESULT GetDataStoreTimeRange([in] short sFacilityID, [in] short sStationID, [in] VARIANT_BOOL bErrDisplay, [out] DATE* FirstTimestamp, [out]DATE* LastTimestamp, [out,retval] VARIANT_BOOL* pbResult);
		[id(11), helpstring("method GetDayStatistics")]			HRESULT GetDayStatistics([in] short sFacilityID, [in] short sStationId, [in] DATE StartTime, [in] DATE EndTime, [out] DATE* pActualStartTime, [out] DATE* pActualEndTime, [out] long* plNumMembers, [out,retval] VARIANT_BOOL* pbResult);
		[id(12), helpstring("method GetDaySummaryData")]		HRESULT GetDaySummaryData([in] short sFacilityID, [in] short sStationID, [in] DATE StartTime, [in] DATE EndTime,  [out] VARIANT* pvDay,  [out,retval] VARIANT_BOOL* pbResult);
		[id(13), helpstring("method GetFilesList")]				HRESULT GetFilesList([in] short sFacilityID, [in] BSTR bstrRootDir, [in] VARIANT_BOOL bIncludeSubDirs, [in] VARIANT_BOOL bMostRecent, [out] VARIANT* psaFilesList);
		[id(14), helpstring("method GetParameters")]			HRESULT GetParameters([in] short sFacilityID, [out] VARIANT* pvParms, [out,retval] VARIANT_BOOL* pbResult);
		[id(15), helpstring("method InitializeDataStore")]		HRESULT InitializeDataStore([in] short sFacilityID, [in] VARIANT_BOOL bQuestion, [out, retval] VARIANT_BOOL* pbSuccess);
		[id(16), helpstring("method OpenDataStore")]			HRESULT OpenDataStore([in] short sFacilityID, [out, retval] VARIANT_BOOL* pbSuccess);
		[id(17), helpstring("method RestoreDataStore")]			HRESULT RestoreDataStore([in] short sFacilityID, [in] BSTR bstrSourcePath, [in] VARIANT_BOOL bQuestion, [in] VARIANT_BOOL bDefault, [out, retval] VARIANT_BOOL* pbResult);
		[id(18), helpstring("method SetParameters")]			HRESULT SetParameters([in] short sFacilityID, [in] VARIANT vParms, [out,retval] VARIANT_BOOL* pbResult);
	};

[
	uuid(595D7917-F0FF-461E-AFDE-7FAD53FD90CE),
	version(1.0),
	helpstring("CoBinaryImport 1.0 Type Library")
]
library COBINARYIMPORTLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(C6E7683F-4C2B-4586-BBA5-DFC973644B18),
		helpstring("BinaryImport Class")
	]
	coclass BinaryImport
	{
		[default] interface IBinaryImport;
	};
};
